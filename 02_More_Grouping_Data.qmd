---
title: "Intro to Data Analysis in R - Additional Grouping"
author: "Aaron Kessler"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load the packages we'll need
library(tidyverse)
library(lubridate)
library(readxl)
library(writexl)
library(janitor)

```

## Presidential Candidate Trips (Dem Primary)


```{r}
# Load in data of prez candidate campaign trips 
events <- readRDS("data/events_saved.rds")
```


```{r}
# Let's take a look at what we've got

events
```


```{r}
# Remember how we can filter

events %>% 
  filter(state == "IA")
```


```{r}
# Filtering for more than one value
# First way: using the "|" symbol to mean OR

events %>% 
  filter(state == "IA" | state == "TX")
```


```{r}
# Second way: using the %in% command and using vector of values

events %>% 
  filter(state %in% c("IA", "TX"))
```


```{r}
# And remember how we can sort

mystates <- c("IA", "TX")

events %>% 
  filter(state %in% mystates) %>% 
  arrange(desc(date))
```

## Adding/Changing Columns with Mutate()

To add or modify a column, you give it a name, then a single equal sign (=), then define what's in it.  

```{r}
# Test example:

events %>% 
  mutate(mycolumn = "hi there") #remember what happens with recycling here

```


```{r}
events %>% 
  mutate(electioncycle = 2020)
```


```{r}
# Now let's try adding our date-related columns.  First we'll try year.
#created a new column called year, and extract the year of the respective date

events %>% 
  mutate(year = year(date))
```


```{r}
# We can add multiple columns as part of one mutate call. Let's do year, month and day in one swoop.
#same as the last case, but using month, date, and year

events %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```


```{r}
# This is a good time to remind ourselves that if we want to save our new columns, need to *create new object* or *overwrite* by assigning it to itself

events <- events %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```


```{r}
# Now we can use our new columns to filter

events %>% 
  filter(year == 2019,
         month == 1)
```


```{r}
# Show me just Kamala's events in January

events %>% 
  filter(year == 2019,
         month == 1,
         cand_lastname == "Harris")
```


## Grouping / Aggregating Data  
  
We'll use the tidyverse and dplyr's `group_by()` and `summarise()` 
They work together!! 
   
Let's do some counting with `n()`.
```{r}
#separate each group of events based on the candidate last name and use the summarise to show what you want to do, in this case is only to count them up 

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n())

```


```{r}
# now let's add arrange to see who has the most trips
# (not run)  
# events %>% 
#   group_by(cand_lastname) %>% 
#   summarise(n()) %>% 
#   arrange(n)
```


```{r}
# hmm - what's going on here? Look closely and see what the generated count column is called
# events %>% 
#   group_by(cand_lastname) %>% 
#   summarise(n()) %>% 
#   arrange("n()")
```


```{r}
# that doesn't work either.  What about this.

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n()) %>% 
  arrange()

# Ah - so that sort of works? But not really, how do we get desc
# events %>% 
#   group_by(cand_lastname) %>% 
#   summarise(n()) %>% 
#   arrange(desc)
```


```{r}
# Oy - this is getting frustrating. How do we solve?  

# By doing this: giving the new column a NAME of our own.  
# Check it out:

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n = n())
```


```{r}
# Now we can do:
#It is possible to do the arranging now because he have assigned the function its own name 

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n = n()) %>% 
  arrange(desc(n))
```


```{r}
# Bingo  
# We can call the new columnn anything we want. "n" is a common thing for counts,  
# but can be anything

events %>% 
  group_by(cand_lastname) %>% 
  summarise(numtrips = n()) %>% 
  arrange(desc(numtrips))
```


```{r}
# Now for some magic  

# Because this counting is such a common operation, and because the `n()` becomes a pain to deal with...  
# ...there is a special shortcut that we can use that collapses everything (both the groub by and the summarise with the counting function) into one function
#it automatic gives the name of the column as "n()"

events %>% 
  count(cand_lastname)
```


```{r}
events %>% 
  count(cand_lastname) %>% 
  arrange(desc(n))
```


```{r}
# top states visited

events %>% 
  count(state) %>% 
  arrange(desc(n))

#OR

events %>% 
  count(state, sort=TRUE, name = "numberoftrips")

#the SORT=TRUE function automatically sets into descending order 
#the name function is to change the "n()" column name to something else 
```


```{r}
## even MORE magic: you don't have to use arrange either, you can use a built-in
# argument in count() called sort...

# top months
events %>% 
  count(month, sort = TRUE)
```


```{r}
# top single day for most trips
events %>% 
  count(date, sort = TRUE)
```


```{r}
# we can also group by **more than one** variable  
# which candidates have gone to which states?
#how many trips each candidate went to each state? 
# arrange(state) is for alphabetically arranging 

events %>% 
  count(cand_lastname, state) %>% 
  arrange(state, desc(n))
```


```{r}
# what about the most frequent types of events

events %>% 
  count(event_type) %>% 
  arrange(desc(n))
```

## Some more grouping practice: Baseball Salaries 

And how do we get data into R in the first place again??? Let's talk about it.  
  
Remember our CSV imports from Excel? Kind of a similar concept, we can bring from CSV or EXCEL into R.

```{r}
#import the data
salaries <- read_excel("data/MLB2018.xlsx") %>% 
  clean_names()

#let's see what we have
salaries 

#Wait, what did that clean names do???
#took away caps lock in the name of the columns 
```


```{r}
# Now some grouping
#sum() function to sum up the column that you want to add

# What the total payroll paid out by each team?
salaries %>% 
  group_by(team) %>% 
  summarise(sum(salary))
```


```{r}
#now let's give our new colum with the sums a NAME and sort by salary descending
#we assigned it a new name 
salaries %>% 
  group_by(team) %>% 
  summarise(total_dollars = sum(salary)) %>% 
  arrange(desc(total_dollars))
```


```{r}
# What the total paid in the league for each position?
salaries %>% 
  group_by(pos) %>%  # <--this is all that changed
  summarise(total_dollars = sum(salary)) %>% 
  arrange(desc(total_dollars))
```


```{r}
# What about the average paid for each position?
#we can also use the median() formula 
salaries %>% 
  group_by(pos) %>% 
  summarise(average_paid = mean(salary)) %>% 
  arrange(desc(average_paid))
```


```{r}
# And if you don't believe in the Designated Hitter?
#NOT EQUAL is != "something"
salaries %>% 
  filter(pos != "DH") %>% 
  group_by(pos) %>% 
  summarise(average_paid = mean(salary)) %>% 
  arrange(desc(average_paid))
```


## Saving and iterating 

```{r}
# let's say I want to save the results?
# we'll go back to the top team payrolls
# we can give it a name within R --> save it with a new name to the dataset 
#decide the file you want to export as 

teampayrolls <- salaries %>% 
  group_by(team) %>% 
  summarise(total_dollars = sum(salary)) %>% 
  arrange(desc(total_dollars))

teampayrolls
```


```{r}
# export it to a spreadsheet to share with others
# in this case, we chose to export as an excel file with the following function 
# 2 arguments --> name of the dataset, and the name of the file (in this case within the data folder)
#it shows up on the site within the data folder and can be opened on excel 
write_xlsx(teampayrolls, "data/teampayrolls.xlsx")


```


